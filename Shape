
public abstract class Shape implements Comparable<Shape> {
    private int ID;
    private int nextID = 0;

    public Shape() {
        ID = nextID;
        nextID++;
    }

    public int getID() {
        return ID;
    }

    public abstract String getType();

    public abstract double getPerimeter();

    public abstract double getArea();

    @Override
    public int compareTo(Shape other) {
        if (this.getType().compareTo(other.getType()) < 0) {
            return -1;
        } else if (this.getType().compareTo(other.getType()) > 0) {
            return 1;
        } else {
            if (this.getPerimeter() < other.getPerimeter()) {
                return -1;
            } else if (this.getPerimeter() > other.getPerimeter()) {
                return 1;
            } else {
                if (this.getArea() < other.getArea()) {
                    return -1;
                } else if (this.getArea() > other.getArea()) {
                    return 1;
                }
                return 0;
            }
        }
    }

    @Override
    public String toString() {
        return getType()
                + ", ID: " + ID
                + ", PERIMETER: " + String.format("%.1f", getPerimeter())
                + ", AREA: " + String.format("%.1f", getArea());
    }
}
